# -*- coding: utf-8 -*-
"""Data_Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xIzztZXfNA-NlQTBFrLjaj5zH6-kZ3sd
"""

pip install yfinance

from google.colab import drive
drive.mount('/content/drive')

import sys
sys.path.append('/content/drive/MyDrive/FE-630 Final Project')

import datetime as dt
import yfinance as yf
import pandas as pd
import numpy as np
import datetime
import datetime as dt
from datetime import datetime, timedelta  
import scipy
import matplotlib.dates as mdates
from django.contrib.admin.utils import flatten
from sklearn.linear_model import LinearRegression
import statsmodels.api as smf
import cvxpy as cp
from scipy.stats import norm
import math
import matplotlib.pyplot as plt
import statistics

"""ETFs Details"""
# FXE - Currency Shares Euro Trust
# EWJ - iShares MSCI Japan Index
# GLD - SPDR GOLD Trust
# QQQ - Powershares NASDAQ-100 Trust
# SPY - SPDR S&P 500
# SHV - iShares Lehman Short Treasury Bond
# DBA - PowerShares DB Agriculture Fund
# USO - United States Oil Fund LP
# XBI - SPDR S&P Biotech
# ILF - iShares S&P Latin America 40 Index
# EPP - iShares MSCI Pacific ex-Japan Index Fund
# FEZ - SPDR DJ Euro Stoxx 50


Industry_ETF = ["FXE","EWJ","GLD","QQQ","SPY","SHV","DBA","USO","XBI","ILF", "EPP", "FEZ"]
start = "2007-02-28"
end = '2020-10-30'
cl_price = pd.DataFrame() # empty dataframe which will be filled with closing prices of each stock
ohlcv_data = {}

# looping over tickers and storing OHLCV dataframe in dictionary
for ticker in Industry_ETF:
    ohlcv_data[ticker] = yf.download(ticker, start, end)

# looping over tickers and creating a DataFrame with close prices
for ticker in Industry_ETF:
    cl_price[ticker] = yf.download(ticker, start, end)["Adj Close"]

# Daily Returns
daily_ret = cl_price.pct_change()[1:]

"""## Implementing the Fama French 3-Factor Model"""

# Pre-Crisis Period
start_precrisis = '2007-03-01'
end_precrisis = '2007-12-31'

# During Crisis Period
start_durcrisis = '2008-01-01'
end_durcrisis = '2009-06-30'

# Post Crisis Period
start_postcrisis = '2009-07-01'
end_postcrisis = '2020-10-29'

# Define look-Back Period
Long = 150
Medium = 90
Short = 40

# Beta Targets for testing
Beta_tar = [-1.0, -0.5, 0, 0.5, 1, 1.5]

# Downloading the factors
""" Have downloaded the data from Ken French's website - https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html.
The Tbill return is the simple daily rate that in the month compounds to 1-month TBill rate from Ibbotson and Associates Inc."""

FF_Factors_Data = pd.read_csv(r'/content/drive/MyDrive/FE-630 Final Project/F-F_Research_Data_Factors_daily.CSV')
# FF_Factors_Data = pd.read_csv(r'/content/drive/MyDrive/F-F_Research_Data_Factors_daily.csv')

# Format the data and filter with start date = "2007-03-01" and end date = "2020-10-29"
FF_Factors_Data['Date'] = pd.to_datetime(FF_Factors_Data['Date'], format='%Y%m%d', errors='raise')
FF_Factors_Data = FF_Factors_Data[(FF_Factors_Data['Date'] >= "2007-03-01") & (FF_Factors_Data['Date'] <= "2020-10-29")].reset_index(drop=True)
FF_Factors_Data.set_index('Date', inplace=True)

# Convert from percent to decimal
FF_Factors_Data = FF_Factors_Data.apply(lambda x: x/ 100)

# Merge the tickers return data with Fama-French data
all_data = pd.merge(daily_ret,FF_Factors_Data, how = 'inner', on = 'Date')

# Rename the columns
all_data.rename(columns={"Mkt-RF":"mkt_excess"}, inplace=True)

print(all_data)

def factor_modelling(regime_data, Industry_ETF, n, LB_period):

  # Filter for LB Period and calculate the projections
  Lookback_db = regime_data.iloc[n:LB_period+n]

  # Regress the factors against each asset to estimate the coefficients for each asset in the portfolio
  reg_res = pd.DataFrame(columns=['Intercept', 'mkt_excess', 'SMB', 'HML'])

  # Form a DataFrame with ticker for the predictions
  y_pred = pd.DataFrame(columns=Industry_ETF)

  for tickers in Industry_ETF:
    ticker_name = f'{tickers}_excess'
    Lookback_db[ticker_name] = Lookback_db[tickers] - Lookback_db['RF']
    model = smf.formula.ols(formula = "Lookback_db[ticker_name] ~ mkt_excess + SMB + HML", data = Lookback_db).fit()
    reg_res.loc[tickers,:] = model.params[:]
    X = regime_data.iloc[LB_period+n+1:,[12,13,14]]
    y_pred.loc[:, tickers] = model.predict(X)

  return y_pred

"""## Computing Market Betas for all tickers"""

def betaValues(all_data, Industry_ETF, LB_period, start_date):
  DF = all_data.copy()
  DF.reset_index(inplace=True,drop=False)
  start_date1 = datetime.strptime(start_date, "%Y-%m-%d").date()
  time_end = start_date1 + timedelta(days= int(+LB_period))
  DF[DF['Date'] >= start_date]
  df2 = DF.head(LB_period)
  cols = Industry_ETF.copy()
  cols.append('mkt_excess')
  cols.append('SMB')
  cols.append('HML')
  slopes = []
  first_model = LinearRegression().fit(np.array(df2[cols[0]]).reshape((-1, 1)), np.array(df2[cols[4]]))
  first_slope = first_model.coef_[0]
  slopes.append(first_slope)
  for i in range(len(cols)):
     model = LinearRegression().fit(np.array(df2[cols[i]]).reshape((-1, 1)), np.array(df2[cols[4]]))
     slopes.append(round(model.coef_[0], 6))
  slopes = slopes[1:len(slopes)]
  #creating the beta dataframe
  d = {'ETF': cols, 'Beta': slopes}
  beta_df = pd.DataFrame(data=d)
  beta_df = beta_df.head(12)
  beta = beta_df['Beta'].to_numpy().reshape(12,1)
  return beta

"""## Portfolio Rebalancing & Construction"""

# Creating the weekly Rebalanced Portfolio

def Port_firstAllocation(sample_mu, sample_cov):
    wp = 1 / len(sample_mu)
    wp = np.full(len(sample_mu), wp)
    return wp

def Port_Rebal(Beta_arr, Beta_tar, Wp, sample_mu, sample_cov):
    n = len(sample_mu)
    gamma = cp.Parameter(nonneg=True)
    Beta = cp.Parameter((n, 1))
    Beta_target = cp.Parameter()
    W = cp.Variable(n)
    ret = sample_mu.T @ W
    risk = cp.quad_form((W-Wp), sample_cov)
    objective = cp.Maximize(ret - gamma * risk)    # defining the problem
    constraints = [cp.sum(W) == 1, W >= -2, W <= 2, Beta.T @ W == Beta_target]     # defining the constraints
    prob = cp.Problem(objective, constraints)
    gamma.value = 0.04535
    Beta_target.value = Beta_tar
    Beta.value = Beta_arr
    prob.solve(solver=cp.SCS)

    return W.value

"""## Computation Engine to test various strategies"""

""" Implementing the strategy computation engine for testing for a whole regime"""

def Strategy_Implementation(all_data, Industry_ETF, start_date, end_date, 
                            Beta_tar, LB_period_ret, LB_period_cov):
  Portfolio_daily_ret = []

  # Selection of the Regime
  regime_data = all_data[start_date:end_date]

  for idx in range(0, len(regime_data), 5):

    # Record the returns & Cov matrix for the sample factor Model
    sample_ret = factor_modelling(regime_data, Industry_ETF, idx, LB_period_ret)
    sample_retcov = factor_modelling(regime_data, Industry_ETF, idx, LB_period_cov)
    if len(sample_retcov) <= 1:
      break
    else:
      sample_cov = sample_retcov.cov().to_numpy()

    # Average Return of tickers
    sample_mu = pd.DataFrame()
    for tickers in Industry_ETF:
        sample_mu.loc['mu', tickers] = sample_ret[tickers].mean()
    n = len(sample_mu.T)
    sample_mu = np.array(sample_mu).reshape((n, 1))

    # Computing the Initial Weights at the start of trading
    if idx == 0:
      W = Port_firstAllocation(sample_mu, sample_cov)
    else:
      Beta_arr = betaValues(all_data, Industry_ETF, LB_period_ret, start_date)
      W = Port_Rebal(Beta_arr, Beta_tar, W, sample_mu, sample_cov)

    # Computing daily returns until next rebalancing
    Lookback_db = regime_data.iloc[idx:LB_period_ret+idx,:12]
    Lookforward_db = regime_data.iloc[LB_period_ret+idx+1:, :12]
    for i in range(min(5, len(Lookforward_db))):
      ret_sum = 0
      for j in range(len(sample_mu)):
        ret_sum += Lookforward_db.iloc[i, j] * W[j]
      Portfolio_daily_ret.append(ret_sum)

  return Portfolio_daily_ret

"""## Backtesting"""

#function to plot pdf of expected return

def pdfExpected(portfolio, beta_val, graphColor, position):
  x = np.arange(0, len(portfolio), 1)
  y_values = []
  for i in range(len(portfolio)):
      y = portfolio[i]
      y_values.append(y)

  data = y_values
  mean, var  = scipy.stats.distributions.norm.fit(data)
  x = np.linspace(-0.6,1,100)
  fitted_data = scipy.stats.distributions.norm.pdf(x, mean, var)

  plt.ylabel("Portfolio Expected Returns")
  title = "Probability Expected Returns for Given Beta Value = " + str(beta_val) + " " + position + " the Crisis"
  plt.title(title) 
  plt.hist(y_values,color=graphColor, density=True)
  plt.plot(x,fitted_data,'r-')
  plt.axhline(y = 0, color = 'black')
  plt.grid(True)
  return plt.show()

#calculating cumulative returns
def cumReturns(DF, sdate):
    df = pd.DataFrame(DF, columns=['daily_ret'])
    df["cum_return"] = 100.00*(1 + df["daily_ret"]).cumprod()
    cumulatitive_rtns = df['cum_return']

    date1 = datetime.strptime(sdate, "%Y-%m-%d").date()
    base = date1
    date_list = [base + timedelta(days=x) for x in range(len(cumulatitive_rtns))]

    d_list = []
    for i in date_list:
       d_list.append(str(i))
    
    d = {'Date': d_list, 'cum_return': cumulatitive_rtns}
    df = pd.DataFrame(data=d)
    return df

#function to plot cdf of expected return before crisis
def cdfExpectedBefore(portfolio, beta_val, graphColor, position, sdate):
   cumRtns = cumReturns(portfolio, sdate)

   now = datetime.strptime(sdate, "%Y-%m-%d").date()
   then = now + dt.timedelta(days=int(len(cumRtns['cum_return'])))
   days = mdates.drange(now,then,dt.timedelta(days=1))

   DF = all_data.copy()
   DF.reset_index(inplace=True,drop=False)
   cum_rtns = 100.00*(1 + DF['SPY']).cumprod()
   d = {'Date': DF['Date'], 'cum_return': cum_rtns}
   df = pd.DataFrame(data=d)

   BeforeCrisis = df.loc[(df['Date'] >= start_precrisis) & (df['Date'] <= end_precrisis)]


   fig, ax = plt.subplots(figsize=(50, 50))
   plt.ylabel("Portfolio Expected Returns - $")
   title = "Cumulatitive Expected Returns for "  + str(beta_val) + " " + position + " the Crisis"
   plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
   plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
   ax.plot(days,cumRtns['cum_return'], color=graphColor, label = position)
   ax.plot(BeforeCrisis['Date'],BeforeCrisis['cum_return'], color='red', label = 'SPY')
   plt.axhline(y = 0, color = 'black')
   plt.grid(True)
   plt.legend(loc=2, prop={'size': 45})
   plt.gcf().autofmt_xdate()
   return plt.show()

#function to plot cdf of expected return during crisis
def cdfExpectedDuring(portfolio, beta_val, graphColor, position, sdate):
   cumRtns = cumReturns(portfolio, sdate)

   now = datetime.strptime(sdate, "%Y-%m-%d").date()
   then = now + dt.timedelta(days=int(len(cumRtns['cum_return'])))
   days = mdates.drange(now,then,dt.timedelta(days=1))

   DF = all_data.copy()
   DF.reset_index(inplace=True,drop=False)
   cum_rtns = 100.00*(1 + DF['SPY']).cumprod()
   d = {'Date': DF['Date'], 'cum_return': cum_rtns}
   df = pd.DataFrame(data=d)

   DuringCrisis = df.loc[(df['Date'] >= start_durcrisis) & (df['Date'] <= end_durcrisis)]


   fig, ax = plt.subplots(figsize=(50, 50))
   plt.ylabel("Portfolio Expected Returns - $")
   title = "Cumulatitive Expected Returns for "  + str(beta_val) + " " + position + " the Crisis"
   plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
   plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
   ax.plot(days,cumRtns['cum_return'], color=graphColor, label = position)
   ax.plot(DuringCrisis['Date'],DuringCrisis['cum_return'], color='red', label = 'SPY')
   plt.axhline(y = 0, color = 'black')
   plt.grid(True)
   plt.legend(loc=2, prop={'size': 45})
   plt.gcf().autofmt_xdate()
   return plt.show()

#function to plot cdf of expected return after crisis
def cdfExpectedAfter(portfolio, beta_val, graphColor, position, sdate):
   cumRtns = cumReturns(portfolio, sdate)

   now = datetime.strptime(sdate, "%Y-%m-%d").date()
   then = now + dt.timedelta(days=int(len(cumRtns['cum_return'])))
   days = mdates.drange(now,then,dt.timedelta(days=1))

   DF = all_data.copy()
   DF.reset_index(inplace=True,drop=False)
   cum_rtns = 100.00*(1 + DF['SPY']).cumprod()
   d = {'Date': DF['Date'], 'cum_return': cum_rtns}
   df = pd.DataFrame(data=d)

   AfterCrisis = df.loc[(df['Date'] >= start_postcrisis) & (df['Date'] <= end_postcrisis)]


   fig, ax = plt.subplots(figsize=(50, 50))
   plt.ylabel("Portfolio Expected Returns - $")
   title = "Cumulatitive Expected Returns for "  + str(beta_val) + " " + position + " the Crisis"
   plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
   plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
   ax.plot(days,cumRtns['cum_return'], color=graphColor, label = position)
   ax.plot(AfterCrisis['Date'],AfterCrisis['cum_return'], color='red', label = 'SPY')
   plt.axhline(y = 0, color = 'black')
   plt.grid(True)
   plt.legend(loc=2, prop={'size': 45})
   plt.gcf().autofmt_xdate()
   return plt.show()

# Parameters for Testing (start_date = start_precrisis, end_date = end_precrisis, Beta_tar = 1.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_Before_B1 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_precrisis, 
                                     1.0, Short, Short)

# Parameters for Testing (start_date = start_precrisis, end_date = end_precrisis, Beta_tar = -1.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_Before_Bneg1 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_precrisis, 
                                     -1.0, Short, Short)

# Parameters for Testing (start_date = start_precrisis, end_date = end_precrisis, Beta_tar = 0.5, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_Before_Bpt5 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_precrisis, 
                                     0.5, Short, Short)

# Parameters for Testing (start_date = start_durcrisis, end_date = end_durcrisis, Beta_tar = 1.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_During_B1 = Strategy_Implementation(all_data, Industry_ETF, start_durcrisis, end_durcrisis, 
                                     1.0, Short, Short)

# Parameters for Testing (start_date = start_durcrisis, end_date = end_durcrisis, Beta_tar = -1.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_During_Bneg1 = Strategy_Implementation(all_data, Industry_ETF, start_durcrisis, end_durcrisis, 
                                     -1.0, Short, Short)

# Parameters for Testing (start_date = start_durcrisis, end_date = end_durcrisis, Beta_tar = 0.5, LB_period_ret = Long, LB_period_cov = Long)
Long_Long_During_Bpt5 = Strategy_Implementation(all_data, Industry_ETF, start_durcrisis, end_durcrisis, 
                                     0.5, Long, Long)

# Parameters for Testing (start_date = start_postcrisis, end_date = end_postcrisis, Beta_tar = 1.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_After_B1 = Strategy_Implementation(all_data, Industry_ETF, start_postcrisis, end_postcrisis, 
                                     1.0, Short, Short)

# Parameters for Testing (start_date = start_postcrisis, end_date = end_postcrisis, Beta_tar = -1.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_After_Bneg1 = Strategy_Implementation(all_data, Industry_ETF, start_postcrisis, end_postcrisis, 
                                     -1.0, Short, Short)

# Parameters for Testing (start_date = start_precrisis, end_date = end_precrisis, Beta_tar = 1.0, LB_period_ret = Long, LB_period_cov = Long)
Long_Long_Before_B1 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_precrisis, 
                                     1.0, Long, Long)

# Parameters for Testing (start_date = start_durcrisis, end_date = end_durcrisis, Beta_tar = 1.0, LB_period_ret = Long, LB_period_cov = Long
Long_Long_During_B1 = Strategy_Implementation(all_data, Industry_ETF, start_durcrisis, end_durcrisis, 
                                     1.0, Long, Long)

# Parameters for Testing (start_date = start_postcrisis, end_date = end_postcrisis, Beta_tar = 1.0, LB_period_ret = Long, LB_period_cov = Long)
Long_Long_After_B1 = Strategy_Implementation(all_data, Industry_ETF, start_postcrisis, end_postcrisis, 
                                     1.0, Long, Long)

# Parameters for Testing (start_date = start_precrisis, end_date = end_postcrisis, Beta_tar = 1.0, LB_period_ret = Long, LB_period_cov = Long)
Long_Long_Whole_B1 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_postcrisis, 
                                     1.0, Long, Long)

# Parameters for Testing (start_date = start_precrisis, end_date = end_postcrisis, Beta_tar = -1.0, LB_period_ret = Medium, LB_period_cov = Long)
Long_Long_Whole2_Bneg1 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_postcrisis, 
                                     -1.0, Medium, Long)

# Parameters for Testing (start_date = start_precrisis, end_date = end_postcrisis, Beta_tar = -1.0, LB_period_ret = Medium, LB_period_cov = Long)
Short_Short_Whole3_B2 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_postcrisis, 
                                     2.0, Short, Short)

# Parameters for Testing (start_date = start_precrisis, end_date = end_precrisis, Beta_tar = 1.0, LB_period_ret = Medium, LB_period_cov = Long)
Medium_Long_Before1_B1 = Strategy_Implementation(all_data, Industry_ETF, start_precrisis, end_precrisis, 
                                     1.0, Medium, Long)

# Parameters for Testing (start_date = start_durcrisis, end_date = end_durcrisis, Beta_tar = 1.0, LB_period_ret = Medium, LB_period_cov = Long)
Medium_Long_During_B1 = Strategy_Implementation(all_data, Industry_ETF, start_durcrisis, end_durcrisis, 
                                     1.0, Medium, Long)

# Parameters for Testing (start_date = start_postcrisis, end_date = end_postcrisis, Beta_tar = 1.0, LB_period_ret = Medium, LB_period_cov = Long)
Medium_Long_After_B1 = Strategy_Implementation(all_data, Industry_ETF, start_postcrisis, end_postcrisis, 
                                     1.0, Medium, Long)

# Parameters for Testing (start_date = start_durcrisis, end_date = end_durcrisis, Beta_tar = 0.0, LB_period_ret = Short, LB_period_cov = Short)
Short_Short_During_B0 = Strategy_Implementation(all_data, Industry_ETF, start_durcrisis, end_durcrisis, 
                                     0.0, Short, Short)

#plotting the returns for Portfolios for different betas
graph_colors = ['blue','green', 'orange','cyan','magenta','yellow','black','olive','plum','tan','brown','maroon','red', 'pink']

pdfExpected(Short_Short_Before_B1, 1.0, graph_colors[0], "Short_Short_Before_B1")
cdfExpectedBefore(Short_Short_Before_B1, 1.0, graph_colors[0], "Short_Short_Before_B1", start_precrisis)

pdfExpected(Short_Short_Before_Bneg1, -1.0, graph_colors[1], "Short_Short_Before_Bneg1")
cdfExpectedBefore(Short_Short_Before_Bneg1, -1.0, graph_colors[1], "Short_Short_Before_Bneg1", start_precrisis)

pdfExpected(Short_Short_Before_Bpt5, 0.5, graph_colors[2], "Short_Short_Before_Bpt5")
cdfExpectedBefore(Short_Short_Before_Bpt5, 0.5, graph_colors[2], "Short_Short_Before_Bpt5", start_precrisis)

pdfExpected(Short_Short_During_B1, 1.0, graph_colors[3], "Short_Short_During_B1")
cdfExpectedDuring(Short_Short_During_B1, 1.0, graph_colors[3], "Short_Short_During_B1", start_durcrisis)

pdfExpected(Short_Short_During_Bneg1, -1.0, graph_colors[4], "Short_Short_During_Bneg1")
cdfExpectedDuring(Short_Short_During_Bneg1, -1.0, graph_colors[4], "Short_Short_During_Bneg1", start_durcrisis)

pdfExpected(Short_Short_After_B1, 1.0, graph_colors[5], "Short_Short_After_B1")
cdfExpectedAfter(Short_Short_After_B1, 1.0, graph_colors[5], "Short_Short_After_B1", start_postcrisis)

pdfExpected(Short_Short_After_Bneg1, -1.0, graph_colors[6], "Short_Short_After_Bneg1")
cdfExpectedAfter(Short_Short_After_Bneg1, -1.0, graph_colors[6], "Short_Short_After_Bneg1", start_postcrisis)

pdfExpected(Long_Long_Before_B1, 1.0, graph_colors[7], "Long_Long_Before_B1")
cdfExpectedBefore(Long_Long_Before_B1, 1.0, graph_colors[7], "Long_Long_Before_B1", start_precrisis)

pdfExpected(Long_Long_During_Bpt5, 0.5, graph_colors[8], "Long_Long_During_Bpt5")
cdfExpectedDuring(Long_Long_During_Bpt5, 0.5, graph_colors[8], "Long_Long_During_Bpt5", start_durcrisis)

pdfExpected(Short_Short_During_B0, 0.0, graph_colors[8], "Short_Short_During_B0")
cdfExpectedDuring(Short_Short_During_B0, 0.0, graph_colors[8], "Short_Short_During_B0", start_durcrisis)

pdfExpected(Long_Long_During_B1, 0.5, graph_colors[9], "Long_Long_During_B1")
cdfExpectedAfter(Long_Long_During_B1, 0.5, graph_colors[9], "Long_Long_During_B1", start_postcrisis)

pdfExpected(Long_Long_After_B1, 1.0, graph_colors[9], "Long_Long_After_B1")
cdfExpectedAfter(Long_Long_After_B1, 1.0, graph_colors[9], "Long_Long_After_B1", start_postcrisis)

pdfExpected(Long_Long_Whole_B1, 1.0, graph_colors[10], "Long_Long_Whole_B1")
cdfExpectedBefore(Long_Long_Whole_B1, 1.0, graph_colors[10], "Long_Long_Whole_B1", start_precrisis)

pdfExpected(Long_Long_Whole_Bneg1, -1.0, graph_colors[10], "Long_Long_Whole_Bneg1")
cdfExpectedBefore(Long_Long_Whole_Bneg1, -1.0, graph_colors[10], "Long_Long_Whole_Bneg1", start_precrisis)

pdfExpected(Short_Short_Whole_B2, 2.0, graph_colors[10], "Short_Short_Whole_B2")
cdfExpectedBefore(Short_Short_Whole_B2, 2.0, graph_colors[10], "Short_Short_Whole_B2", start_precrisis)

pdfExpected(Medium_Long_Before_B1, 1.0, graph_colors[13], "Medium_Long_Before_B1")
cdfExpectedBefore(Medium_Long_Before_B1, 1.0, graph_colors[13], "Medium_Long_Before_B1", start_precrisis)

pdfExpected(Medium_Long_During_B1, 1.0, graph_colors[0], "Medium_Long_During_B1")
cdfExpectedDuring(Medium_Long_During_B1, 1.0, graph_colors[0], "Medium_Long_During_B1", start_durcrisis)

pdfExpected(Medium_Long_After_B1, 1.0, graph_colors[1], "Medium_Long_After_B1")
cdfExpectedAfter(Medium_Long_After_B1, 1.0, graph_colors[1], "Medium_Long_After_B1", start_postcrisis)

"""Performance Indicators"""

def CAGR(DF):
    "function to calculate the Cumulative Annual Growth Rate of a trading strategy"
    df = pd.DataFrame(DF, columns=['daily_ret'])
    df["cum_return"] = (1 + df["daily_ret"]).cumprod()
    n = len(df)/250
    cagr_final = (df["cum_return"].iloc[len(df)-1]) - 1
    # cagr_final = (df["cum_return"].iloc[len(df)-1])**(1/n) - 1
    return cagr_final

def volatility(DF):
    "function to calculate annualized volatility of a trading strategy"
    df = pd.DataFrame(DF, columns=['daily_ret'])
    vol = df["daily_ret"].std() * np.sqrt(250)
    return vol

def sharpe(DF, rf):
    "function to calculate sharpe ratio ; rf is the risk free rate"
    n = len(DF)/250
    if n >= 250:
      sr = ((CAGR(DF)+1)**(1/n)-1 - rf) / volatility(DF)
    else:
      sr = ((CAGR(DF)+1)**(n)-1 - rf) / volatility(DF)
    return sr

def max_dd(DF):
    "function to calculate max drawdown"
    df = pd.DataFrame(DF, columns=['daily_ret'])
    df["cum_ret"] = (1+df["daily_ret"]).cumprod()
    df["max_rolling_cum"] = df["cum_ret"].cummax()
    df["drawdown"] = df["max_rolling_cum"] - df["cum_ret"]
    df["drawdown_pct"] = df["drawdown"]/df["max_rolling_cum"]
    max_drawdown = df["drawdown_pct"].rolling(10).max()               
    return max_drawdown.max()                                       # Max 10 Days Drawdown

def skewness(DF):
    "function to calculate skewness of returns"
    df = pd.DataFrame(DF, columns=['daily_ret'])
    skew = df["daily_ret"].skew()
    return skew

def Kurtosis(DF):
    "function to calculate Kurtosis of returns"
    df = pd.DataFrame(DF, columns=['daily_ret'])
    Kurt = df["daily_ret"].kurt()
    return Kurt

def VAR(mean_portfolio, stdev_portfolio):
    " function to calculate VAR of daily returns"  
    conf_level = 0.05  # 95% Significance level
    var = norm.ppf(conf_level)*stdev_portfolio - mean_portfolio 
    return var

def CVAR(mean_portfolio, stdev_portfolio):
    conf_level = 0.05  # 95% Significance level
    CVaR = (1 - conf_level)**-1 * norm.pdf(norm.ppf(1 - conf_level))*stdev_portfolio - mean_portfolio
    return CVaR

# Record the results for each strategy
Results_pre = pd.DataFrame(index=['Daily Mean Arithmetic Return', 'Min Return', 'Cumulated Return', 'Max 10 Days Drawdown', 
                              'Volatility', 'Sharpe Ratio', 'Skewness', 'Kurtosis', 'Modified VAR','CVAR'])
Results_dur = pd.DataFrame(index=['Daily Mean Arithmetic Return', 'Min Return', 'Cumulated Return', 'Max 10 Days Drawdown', 
                              'Volatility', 'Sharpe Ratio', 'Skewness', 'Kurtosis', 'Modified VAR','CVAR'])
Results_post = pd.DataFrame(index=['Daily Mean Arithmetic Return', 'Min Return', 'Cumulated Return', 'Max 10 Days Drawdown', 
                              'Volatility', 'Sharpe Ratio', 'Skewness', 'Kurtosis', 'Modified VAR','CVAR'])
Results_Whole = pd.DataFrame(index=['Daily Mean Arithmetic Return', 'Min Return', 'Cumulated Return', 'Max 10 Days Drawdown', 
                              'Volatility', 'Sharpe Ratio', 'Skewness', 'Kurtosis', 'Modified VAR','CVAR'])

strategies_pre = [Short_Short_Before_B1,Short_Short_Before_Bneg1,Short_Short_Before_Bpt5, Long_Long_Before_B1, 
                  Medium_Long_Before1_B1, all_data['SPY'][start_precrisis:end_precrisis].to_numpy()]
strategies_dur = [Short_Short_During_B1,Short_Short_During_Bneg1, Long_Long_During_Bpt5, 
                  Short_Short_During_B0, Medium_Long_During_B1, Long_Long_During_B1,all_data['SPY'][start_durcrisis:end_durcrisis].to_numpy()]
strategies_post = [Short_Short_After_B1, Short_Short_After_Bneg1, Long_Long_After_B1,Medium_Long_After_B1, all_data['SPY'][start_postcrisis:end_postcrisis].to_numpy()]
strategies_Whole = [Long_Long_Whole_B1, Long_Long_Whole2_Bneg1, Short_Short_Whole3_B2, all_data['SPY'].to_numpy()]

strategies_pre_name = ['Short_Short_Before_B1','Short_Short_Before_Bneg1','Short_Short_Before_Bpt5', 'Long_Long_Before_B1', 
                       'Medium_Long_Before1_B1', 'SPY']
strategies_dur_name = ['Short_Short_During_B1','Short_Short_During_Bneg1', 'Long_Long_During_Bpt5', 
                       'Short_Short_During_B0', 'Medium_Long_During_B1', 'Long_Long_During_B1','SPY']
strategies_post_name = ['Short_Short_After_B1', 'Short_Short_After_Bneg1', 'Long_Long_After_B1','Medium_Long_After_B1', 'SPY']
strategies_Whole_name = ['Long_Long_Whole_B1', 'Long_Long_Whole2_Bneg1', 'Short_Short_Whole3_B2', 'SPY']

def record_results(Results, DF, i, regime):
  df = pd.DataFrame(DF, columns=['daily_ret'])
  if regime == 'Pre':
    column_name = strategies_pre_name[i]
  elif regime == 'Dur':
    column_name = strategies_dur_name[i]
  elif regime == 'Post':
    column_name = strategies_post_name[i]
  elif regime == 'Whole':
    column_name = strategies_Whole_name[i]
  mean_portfolio = df['daily_ret'].mean()
  stdev_portfolio = df['daily_ret'].std()
  Results.loc['Daily Mean Arithmetic Return',column_name] = mean_portfolio
  Results.loc['Min Return',column_name] = df['daily_ret'].min()
  Results.loc['Cumulated Return',column_name] = CAGR(DF)
  Results.loc['Max 10 Days Drawdown',column_name] = max_dd(DF)
  Results.loc['Volatility',column_name] = volatility(DF)
  Results.loc['Sharpe Ratio',column_name] = sharpe(DF, 0)
  Results.loc['Skewness',column_name] = skewness(DF)
  Results.loc['Kurtosis',column_name] = Kurtosis(DF)
  Results.loc['Modified VAR',column_name] = VAR(mean_portfolio, stdev_portfolio)
  Results.loc['CVAR',column_name] = CVAR(mean_portfolio, stdev_portfolio)

# Recording the Results table
for i in range(len(strategies_pre)):
    record_results(Results_pre, strategies_pre[i], i, 'Pre')

for i in range(len(strategies_dur)):
    record_results(Results_dur, strategies_dur[i], i, 'Dur')

for i in range(len(strategies_post)):
    record_results(Results_post, strategies_post[i], i, 'Post')

for i in range(len(strategies_Whole)):
    record_results(Results_Whole, strategies_Whole[i], i, 'Whole')

Results_pre

Results_dur

Results_post

Results_Whole

def Cum_Ret(DF):
    "function to calculate the Cumulative Annual Growth Rate of a trading strategy"
    df = pd.DataFrame(DF, columns=['daily_ret'])
    df["cum_return"] = (1 + df["daily_ret"]).cumprod()
    cagr_final = df["cum_return"]*100
    return cagr_final


# Plotting the Cumulative Returns of all Strategies within a single Regime together

Pre = list(zip(Cum_Ret(Short_Short_Before_B1),Cum_Ret(Short_Short_Before_Bneg1),Cum_Ret(Short_Short_Before_Bpt5), Cum_Ret(Long_Long_Before_B1), 
               Cum_Ret(Medium_Long_Before1_B1), Cum_Ret(all_data['SPY'][start_precrisis:end_precrisis].to_numpy())))

Pre = pd.DataFrame(Pre, columns=['Short_Short_Before_B1','Short_Short_Before_Bneg1','Short_Short_Before_Bpt5', 'Long_Long_Before_B1', 
                                 'Medium_Long_Before1_B1', 'SPY'])
# Plot
plt.figure(); Pre.plot(figsize=(8, 8)); plt.legend(loc='best')

During = list(zip(Cum_Ret(Short_Short_During_B1),Cum_Ret(Short_Short_During_Bneg1), Cum_Ret(Long_Long_During_Bpt5), Cum_Ret(Short_Short_During_B0),
                  Cum_Ret(Medium_Long_During_B1), Cum_Ret(Long_Long_During_B1),Cum_Ret(all_data['SPY'][start_durcrisis:end_durcrisis].to_numpy())))

During = pd.DataFrame(During, columns=['Short_Short_During_B1','Short_Short_During_Bneg1', 'Long_Long_During_Bpt5', 
                                       'Short_Short_During_B0', 'Medium_Long_During_B1', 'Long_Long_During_B1','SPY'])
# Plot
plt.figure(); During.plot(figsize=(8, 8)); plt.legend(loc='best')

Post = list(zip(Cum_Ret(Short_Short_After_B1), Cum_Ret(Short_Short_After_Bneg1), Cum_Ret(Long_Long_After_B1),Cum_Ret(Medium_Long_After_B1), Cum_Ret(all_data['SPY'][start_postcrisis:end_postcrisis].to_numpy())))

Post = pd.DataFrame(Post, columns=['Short_Short_After_B1', 'Short_Short_After_Bneg1', 'Long_Long_After_B1','Medium_Long_After_B1', 'SPY'])
# Plot
plt.figure(); Post.plot(figsize=(8, 8)); plt.legend(loc='best')

Full = list(zip(Cum_Ret(Long_Long_Whole_B1), Cum_Ret(Long_Long_Whole_Bneg1), Cum_Ret(Short_Short_Whole_B2), Cum_Ret(all_data['SPY'].to_numpy())))

Full = pd.DataFrame(Full, columns=['Long_Long_Whole_B1', 'Long_Long_Whole_Bneg1', 'Short_Short_Whole_B2', 'SPY'])
# Plot
plt.figure(); Full.plot(figsize=(8, 8)); plt.legend(loc='best')